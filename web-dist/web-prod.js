(()=>{"use strict";function e(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLenght&&"string"==typeof e.value&&(t=t&&e.value.trim().length>=e.minLenght),null!=e.maxLenght&&"string"==typeof e.value&&(t=t&&e.value.trim().length<=e.maxLenght),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<e.max),t}function t(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var n;!function(e){e[e.FINISHED=0]="FINISHED",e[e.ACTIVE=1]="ACTIVE"}(n||(n={}));class r{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s,this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class s{constructor(){this.listeners=[]}addListeners(e){this.listeners.push(e)}}class i extends s{constructor(){super(),this.projects=[]}static getInstance(){return this.instance?this.instance:this.instance=new i}addProject(e,t,s){const i=new r(Math.random().toString(),e,t,s,n.ACTIVE);this.projects.push(i);for(const e of this.listeners)e([...this.projects])}}const l=i.getInstance();class o{constructor(e,t,n,r){this.hostElement=document.getElementById(t),this.templateElement=document.getElementById(e);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class a extends o{constructor(){super("project-input","app",!1,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}gatherUserInput(){const t=this.titleInputElement.value,n=this.descriptionInputElement.value,r=this.peopleInputElement.value,s=e({value:t,required:!0}),i=e({value:n,required:!0}),l=e({value:r,required:!0,min:1,max:12});return s&&i&&l?[t,n,parseFloat(r)]:void alert("Invalid input. Please fill all fields")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;l.addProject(e,n,r),this.clearInputs()}}configure(){this.element.addEventListener("submit",this.submitHandler)}render(){}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([t],a.prototype,"submitHandler",null);var c=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class d extends o{get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons assigned`}constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.render()}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}render(){this.element.draggable=!0,this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons,this.element.querySelector("p").textContent=this.project.description}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}}c([t],d.prototype,"dragStartHandler",null),c([t],d.prototype,"dragEndHandler",null);var p=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class u extends o{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],l.addListeners((e=>{const t=e.filter((e=>"active"==this.type?e.status===n.ACTIVE:e.status===n.FINISHED));this.assignedProjects=t,this.renderProjects()})),this.configure(),this.render()}renderProjects(){const e=document.getElementById(`${this.type}-project-list`);e.innerHTML="";for(const t of this.assignedProjects)new d(e.id,t)}configure(){this.element.addEventListener("dragover",this.dragLeaveHandeler),this.element.addEventListener("dragleave",this.dragOverHandeler),this.element.addEventListener("drop",this.dropHandeler)}render(){const e=`${this.type}-project-list`;this.element.querySelector("ul").id=`${e}`,this.element.querySelector("h2").textContent=`${this.type} Projects`.toUpperCase()}dragOverHandeler(e){this.element.querySelector("ul").classList.remove("droppabble")}dropHandeler(e){}dragLeaveHandeler(e){this.element.querySelector("ul").classList.add("droppabble")}}p([t],u.prototype,"dragOverHandeler",null),p([t],u.prototype,"dropHandeler",null),p([t],u.prototype,"dragLeaveHandeler",null),new a,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,